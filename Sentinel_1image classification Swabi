var roi = ee.FeatureCollection("projects/ee-imanfaiq/assets/swabi");
// Set map center to the aoi for making sure we have the correct study area
Map.centerObject(roi, 9)
// Define period of analysis
var start = '2023-01-01';
var end = '2023-12-30';
var season = ee.Filter.date(start,end);
print(season);
// Import Sentinel-1 collection
var sentinel1 =  ee.ImageCollection('COPERNICUS/S1_GRD');
// Filter Sentinel-1 collection for study area, date ranges and polarization components
var sCollection =  sentinel1
                    //filter by aoi and time
                    .filterBounds(roi)
                    .filter(season)
                    // Filter to get images with VV and VH dual polarization
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    // Filter to get images collected in interferometric wide swath mode.
                    .filter(ee.Filter.eq('instrumentMode', 'IW'));
// Also filter based on the orbit: descending or ascending mode
var desc = sCollection.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
var asc = sCollection.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));
// Inspect number of tiles returned after the search; we will use the one with more tiles
print("descending tiles ",desc.size());
print("ascending tiles ",asc.size());
// Also Inspect one file
print(asc.first());
// Create a composite from means at different polarizations and look angles.
var composite = ee.Image.cat([
  asc.select('VH').mean(),
  asc.select('VV').mean(),
  desc.select('VH').mean()
]).focal_median();
// Display as a composite of polarization and backscattering characteristics.
Map.addLayer(composite.clip(roi), {min: [-25, -20, -25], max: [0, 10, 0]}, 'composite');
// Merge points together
var newfc = water.merge(urban).merge(forest).merge(barren);
print(newfc, 'newfc');

var Bands_selection=['VV','VH'];
//overlay
var training = composite.sampleRegions({
  collection:newfc,
  properties:['landcover'],
  scale:10
});

///SPLITS:Training(75%) & Testing samples(25%).
var Total_samples=training.randomColumn('random');
var training_samples=Total_samples.filter(ee.Filter.lessThan('random',0.75));
print(training_samples,"Training Samples");
var validation_samples=Total_samples.filter(ee.Filter.greaterThanOrEquals('random',0.75));
print(validation_samples,"Validation_Samples");


//---------------RANDOM FOREST CLASSIFER-------------------/
// var classifier = ee.Classifier.smileRandomForest(numberOfTrees, variablesPerSplit, minLeafPopulation, bagFraction, maxNodes, seed)
var classifier=ee.Classifier.smileRandomForest(10).train({
features:training,
classProperty:'landcover',
inputProperties:Bands_selection
})
var classified=composite.classify(classifier);
// Define a palette for the Land Use classification.
var palette = [
  '4321EB', // water (1)  
  'ED6557', // urban (2)  
  '0D6D0E', //  forest (3)
  'fec89a'// barren (4) 
];

var classified = classified.clip(roi)
Map.addLayer(classified,{min: 1, max: 4,palette: palette},"classification");
Map.centerObject(roi,10);

var confusionMatrix =classifier.confusionMatrix();
print(confusionMatrix,'Error matrix: ');
print(confusionMatrix.accuracy(),'Training Overall Accuracy: ');
